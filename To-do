What commands and what to do to set up this project from scratch:

1. Figure out what tables you will need:

  TABLE 1: projects
  - Primary Key: project_id,
  - project_name - required
  - project_description - optional
  - project_completed - the database

  TABLE 2: resource
  - Primary Key: resource_id,
  - resource_name - required and unique
  - resource_description - optional

  TABLE 3: task
  - Primary Key: task_id
  - task_description - required
  - task_notes - optional
  - task_completed - the database defaults it to false (integer 0) if not provided
  - Foreign Key: project_id - required and points to an actual project_id in the projects table

  TABLE 4: project_resources
  - Primary Key: project_resources_id,
  - Foreign Key: resource_id,
  - Foreign Key: project_id,

2. Add scripts:
  "start": "node index.js",
  "server": "nodemon index.js",
  "migrate": "knex migrate:latest",
  "rollback": "knex migrate:rollback",
  "seed": "knex seed: run",
  "reset": "npm run rollback && npm run migrate && npm run seed"

3. Install dependencies:
  npm i -D knex-cleaner nodemon eslint
  npm i express sqlite knex
  npm i dotenv (Create a .env folder!!)

4. Create Folders:
  -index.js
  -api
    recipes
      recipes-model.js
      recipes-router.js
      (possibly recipes-middleware.js)
    server.js
  -data
    -migrations(made with npm)
    -seeds
      01-cleanup.js
    db-config.js
  -knexfile.js

5. Build out index.js. This is the entry point for your server.

6. Build out server.js

7. Build out Router

9. Scaffol out your model

10. Scaffol out your middleware if you are using it.

11. Build your knexfile

12. Build out your db-config file

13. Create a migrations folder by installing: 
  npm install sqlite3 --save 
  npx knex migrate:make initial-migration

14. Create your up and down migrations to make/adjust your tables.
    Remember, down your tables the opposite you created them, like sock then shoe/shoe then sock.

15. Create a seed file, inside of your data folder.